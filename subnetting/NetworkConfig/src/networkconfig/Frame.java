package networkconfig;

import java.awt.Color;
import java.text.NumberFormat;
import java.text.ParseException;

public class Frame extends javax.swing.JFrame {

    static NetworkConfig networkConfig = new NetworkConfig();
    static NumberFormat numberFormat = NumberFormat.getIntegerInstance();
    int ipNum[] = new int[4],
    nwNum[] = new int[4],
    snNum[] = new int[4],
    next = 0;


    public Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblIPAddr = new javax.swing.JLabel();
        lblBOctets = new javax.swing.JLabel();
        lblIpBin[] = new javax.swing.JLabel()[4];
        btnOK = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();
        lblClass = new javax.swing.JLabel();
        lblClassMask[] = new javax.swing.JLabel()[4];
        txtIpOctet[] = new javax.swing.JTextField()[4];
        lblNwBin[] = new javax.swing.JLabel()[4];
        lblPNetmask = new javax.swing.JLabel();
        lblNetworkNetmask = new javax.swing.JLabel();
        txtNwMask[] = new javax.swing.JTextField()[4];
        lblIpSubnetmask = new javax.swing.JLabel();
        txtSnMask[] = new javax.swing.JTextField()[];
        lblBinSubnetmask = new javax.swing.JLabel();
        lblSnBin[] = new javax.swing.JLabel()[4];
        lblErrorMsg = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(3, 25), new java.awt.Dimension(3, 25), new java.awt.Dimension(3, 25));
        jPanel2 = new javax.swing.JPanel();
        lblSlashIP = new javax.swing.JLabel();
        lblSlashNetwork = new javax.swing.JLabel();
        lblSlashClass = new javax.swing.JLabel();
        lblSlashSubnet = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Network Config");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Network", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        jPanel1.setName(""); // NOI18N

        lblIPAddr.setText("IP Address");

        lblBOctets.setText("Binary IP");

        lblBin1.setText("0000 0000");
        lblBin1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblBin2.setText("0000 0000");
        lblBin2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblBin3.setText("0000 0000");
        lblBin3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblBin4.setText("0000 0000");
        lblBin4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnOK.setText("Ok");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnQuit.setText("Quit");
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        lblClass.setToolTipText("");
        lblClass.setEnabled(false);

        for (int i=0; i<4; i++) {
            lblClassMask[i].setText("0000 0000");
            lblClassMask[i].setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            lblClassMask[i].setEnabled(false);
        }

        txtIpOctet[].setColumns(3);

        txtOctet2.setColumns(3);

        txtOctet3.setColumns(3);

        txtOctet4.setColumns(3);

        for (int i=0; i<4; i++) {
            lblNwBin[i].setText("0000 0000");
            lblNwBin[i].setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        }

        lblPNetmask.setText("Network Mask");

        lblNetworkNetmask.setText("Network Mask");

        txtMaskP1.setColumns(3);

        txtMaskP2.setColumns(3);

        txtMaskP3.setColumns(3);

        txtMaskP4.setColumns(3);
        txtMaskP4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaskP4ActionPerformed(evt);
            }
        });

        lblSubnetmask1.setText("Subnet Mask");

        txtMaskS1.setColumns(3);

        txtMaskS2.setColumns(3);

        txtMaskS3.setColumns(3);

        txtMaskS4.setColumns(3);
        txtMaskS4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaskS4ActionPerformed(evt);
            }
        });

        lblSubnetmask2.setText("Subnet Mask");

        for (int i=0; i<4; i++) {
        lblSnBin[i].setText("0000 0000");
        lblSnBin[i].setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblSnBin[i].setFocusable(false);
        lblSnBin[i].setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        }

        lblErrorMsg.setForeground(new java.awt.Color(255, 51, 0));
        lblErrorMsg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        lblErrorMsg.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        lblErrorMsg.setMaximumSize(new java.awt.Dimension(250, 100));
        lblErrorMsg.setMinimumSize(new java.awt.Dimension(100, 50));
        lblErrorMsg.setName(""); // NOI18N
        lblErrorMsg.setPreferredSize(new java.awt.Dimension(100, 50));
        lblErrorMsg.setVerifyInputWhenFocusTarget(false);

        btnReset.setText("Reset");
        btnReset.setToolTipText("");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSlashIP)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblSlashIP)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        lblSlashNetwork.setText("/");

        lblSlashClass.setText("/");
        lblSlashClass.setToolTipText("");

        lblSlashSubnet.setText("/");

        lblErrorMsg.setVisible(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIPAddr)
                    .addComponent(lblNetworkNetmask)
                    .addComponent(lblSubnetmask1))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtIpOctet[0], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(txtIpOctet[1], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(txtIpOctet[2], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(txtIpOctet[3], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtNwMask[0], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(txtNwMask[1], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(txtNwMask[2], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(txtNwMask[3], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtSnMask[0], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(txtSnMask[1], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(txtSnMask[2], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(txtSnMask[3], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblClass, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblBOctets, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblPNetmask, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblSubnetmask2, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblIpMask[0])
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblIpMask[1])
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblIpMask[2])
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblIpMask[3]))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(lblIpBin[0])
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblIpBin[1])
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblIpBin[2])
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblIpBin[3]))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(lblNwBin[0])
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblNwBin[1])
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblNwBin[2])
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblNwBin[3]))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(lblSnBin[0])
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblSnBin[1])
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblSnBin[2])
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblSnBin[3]))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSlashClass, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(lblSlashNetwork, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblSlashSubnet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(lblErrorMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnOK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnQuit)
                .addGap(6, 6, 6))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblBin1, lblBin2, lblBin3, lblBin4});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblClass)
                            .addComponent(lblMask1)
                            .addComponent(lblMask2)
                            .addComponent(lblMask3)
                            .addComponent(lblMask4)
                            .addComponent(lblSlashClass))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIPAddr)
                            .addComponent(txtIpOctet[], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtOctet2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtOctet3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtOctet4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBOctets)
                            .addComponent(lblBin1)
                            .addComponent(lblBin2)
                            .addComponent(lblBin3)
                            .addComponent(lblBin4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNetworkNetmask)
                            .addComponent(txtMaskP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaskP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaskP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaskP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPNetmask)
                            .addComponent(lblPBin1)
                            .addComponent(lblPBin2)
                            .addComponent(lblPBin3)
                            .addComponent(lblPBin4)
                            .addComponent(lblSlashNetwork))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSubnetmask1)
                            .addComponent(txtMaskS1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaskS2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaskS3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaskS4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSubnetmask2)
                            .addComponent(lblSBin1)
                            .addComponent(lblSBin2)
                            .addComponent(lblSBin3)
                            .addComponent(lblSBin4)
                            .addComponent(lblSlashSubnet)))
                    .addComponent(filler1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOK)
                            .addComponent(btnQuit)
                            .addComponent(btnReset)))
                    .addComponent(lblErrorMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblBin1, lblBin2, lblBin3, lblBin4});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        lblErrorMsg.setText("");
        lblErrorMsg.setVisible(false);
        lblSlashClass.setText("/");
        lblSlashNetwork.setText("/");
        lblSlashSubnet.setText("/");

        for (int i=0; i<4; i++) {
            txtIpAddr[i].setBackground(Color.WHITE);
            txtNwMask[i].setBackground(Color.WHITE);
            txtSnMask[i].setBackground(Color.WHITE);
            lblClassMask[i].setText("0000 0000");
            lblIpBin[i].setText("0000 0000");
            lblNwBin[i].setText("0000 0000");
            lblSnBin[i].setText("0000 0000");
            ipNum[i] = 0;
            nwNum[i] = 0;
            snNum[i] = 0;
        }
        lblClassName.setText("");
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed

        System.exit(0);
    }//GEN-LAST:event_btnQuitActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        int networkSlash = 0;
        int subnetSlash = 0;
        char classLetter = ' ';
        String classString = "";

        for (int i=0; i<4; i++) {
            txtIpAddr[i].setBackground(Color.WHITE);
            txtNwMask[i].setBackground(Color.WHITE);
            txtSnMask[i].setBackground(Color.WHITE);
        }
        lblErrorMsg.setText("");
        lblErrorMsg.setVisible(false);

        if (validateUserInput()) {
            if (validateInputRange()) {
                networkConfig.getNetworkClass();
            }
        }
    }
    /*
        classLetter = networkConfig.setNetworkClass();
        lblClass.setEnabled(true);
        lblClass.setVisible(true);
        if (classLetter == 'D') {
            lblClass.setText("IP Prefix is Class " + classLetter + " MultiCast");
        } else if (classLetter == 'P') {
            lblClass.setText("IP Prefix is Private");
        } else if (classLetter == 'E') {
            lblClass.setText("IP Prefix is Class " + classLetter + " Reserved");
        } else {
            lblClass.setText("IP Prefix is Class " + classLetter);
            lblClass.setEnabled(true);
        }
        classString = lblBin1.getText();
        if (pClass == 'P') {
            String sub = classString.substring(0,2);
            String colorIt = "<html><font color=red>" + sub + "</font>";
            classString = colorIt + classString.substring(2);
            lblBin1.setText(classString);
            lblSlashClass.setText("/16");
        }
        if (pClass == 'A') {
            String sub = classString.substring(0,1);
            String colorIt = "<html><font color=red>" + sub + "</font>";
            classString = colorIt + classString.substring(1);
            lblBin1.setText(classString);
            lblSlashClass.setText("/8");
        }
        if (pClass == 'B') {
            String sub = classString.substring(0,2);
            String colorIt = "<html><font color=red>" + sub + "</font>";
            classString = colorIt + classString.substring(2);
            lblBin1.setText(classString);
            lblSlashClass.setText("/16");
        }
        if (pClass == 'C') {
            String sub = classString.substring(0,2);
            String colorIt = "<html><font color=red>" + sub + "</font>";
            classString = colorIt + classString.substring(2);
            lblBin1.setText(classString);
            lblSlashClass.setText("/24");
        }
        if (pClass == 'D' || pClass == 'E') {
            String sub = classString.substring(0,3);
            String colorIt = "<html><font color=red>" + sub + "</font>";
            classString = colorIt + classString.substring(3);
            lblBin1.setText(classString);
            lblSlashClass.setText("/32");
        }
        lblMask1.setText(networkConfig.getClassNetMaskNibble(0));
        lblMask1.setEnabled(true);
        lblMask2.setText(networkConfig.getClassNetMaskNibble(1));
        lblMask2.setEnabled(true);
        lblMask3.setText(networkConfig.getClassNetMaskNibble(2));
        lblMask3.setEnabled(true);
        lblMask4.setText(networkConfig.getClassNetMaskNibble(3));
        lblMask4.setEnabled(true);
        lblSlashClass.setEnabled(true);
    }//GEN-LAST:event_btnOKActionPerformed
*/
    private boolean validateUserInput() {
        boolean isValid=true;
        String whatFailed = " ";
        int whichFailed = -1;

        try {
            numberFormat.setMinimumIntegerDigits(1);
            numberFormat.setMaximumIntegerDigits(3);

            for (int i=0; i<4; i++) {
                whatFailed = "ip address";
                whichFailed = i;
                ipNum[i] = numberFormat.parse(txtIpAddr[i].getText()).intValue();

                if (!txtNwMask[i].getText().isEmpty()) {
                    whatFailed = "network";
                    whichFailed = i;
                    nwNum[i] = numberFormat.parse(txtNwMask[i].getText()).intValue();
                }
                if (!txtSnMask[i].getText().isEmpty()) {
                    whatFailed = "subnet";
                    whichFailed = i;
                    snNum[i] = numberFormat.parse(txtSnMask[i].getText()).intValue();
                }
            }
        } catch (NumberFormatException | ParseException ex) {
            isValid = false;
            if (whatFailed.equals("ip address")) {
                txtIpAddr[whichFailed].setBackground(Color.red);
            } else if (whatFailed.equals("network")) {
                txtNwMask[whichFailed].setBackground(Color.red);
            } else
                txtSnMask[whichFailed].setBackground(Color.red);
            lblErrorMsg.setText(ex.getMessage());
            lblErrorMsg.setVisible(true);
            return isValid;
          }
        return isValid;
    }
    /*
                isValid=validateInput(pnum0, pnum1, pnum2, pnum3, "network");

            isValid=validateInputRange(ipAddr, "initial");
            if (isValid) {
                networkConfig.setOctet(ipNum0, 0,"initial");
                networkConfig.setOctet(inum1, 1,"initial");
                networkConfig.setOctet(inum2, 2,"initial");
                networkConfig.setOctet(inum3, 3,"initial");
                nibbles = networkConfig.getNibbles("initial");

                lblBin1.setText(nibbles[0]);
                lblBin2.setText(nibbles[1]);
                lblBin3.setText(nibbles[2]);
                lblBin4.setText(nibbles[3]);
            }


                if (isValid) {
                    networkConfig.setOctet(pnum0, 0,"network");
                    networkConfig.setOctet(pnum1, 1,"network");
                    networkConfig.setOctet(pnum2, 2,"network");
                    networkConfig.setOctet(pnum3, 3,"network");
                    nibbles = networkConfig.getNibbles("network");
                    String showIt = "";
                    String colorIt = "";
                    String sub = "";

                    int j = 0;
                    int i = 0;
                    for(i=0; i<4; i++) {
                        for (j=0; j<9; j++) {
                            if (nibbles[i].charAt(j) == '1' || nibbles[i].charAt(j) == ' ') {
                                if (nibbles[i].charAt(j) == '1')
                                networkSlash++;
                                continue;
                            } else break;
                        }
                        sub = nibbles[i].substring(0,j);
                        colorIt = "<html><font color=red>"+sub+"</font>";
                        showIt = colorIt + nibbles[i].substring(j);
                        if(i == 0) {
                            lblPBin1.setText(showIt);
                            continue;
                        }
                        if (i == 1) {
                            lblPBin2.setText(showIt);
                            continue;
                        }
                        if (i == 2) {
                            lblPBin3.setText(showIt);
                            continue;
                        }
                        if (i == 3) {
                            lblPBin4.setText(showIt);
                            continue;
                        }
                    }
                    lblSlashNetwork.setText("/"+networkSlash);

                }

            if (!txtMaskS1.getText().isEmpty()) {
                whatFailed = "subnet0";
                snum0 = numberFormat.parse(txtMaskS1.getText()).intValue();
                whatFailed = "subnet1";
                snum1 = numberFormat.parse(txtMaskS2.getText()).intValue();
                whatFailed = "subnet2";
                snum2 = numberFormat.parse(txtMaskS3.getText()).intValue();
                whatFailed = "subnet3";
                snum3 = numberFormat.parse(txtMaskS4.getText()).intValue();
                isValid = validateInput(snum0, snum1, snum2, snum3, "subnet");
                if (isValid) {
                    networkConfig.setOctet(snum0, 0,"subnet");
                    networkConfig.setOctet(snum1, 1,"subnet");
                    networkConfig.setOctet(snum2, 2,"subnet");
                    networkConfig.setOctet(snum3, 3,"subnet");
                    nibbles = networkConfig.getNibbles("subnet");

                    String showIt = "";
                    String colorIt = "";
                    String sub = "";
                    int j = 0;
                    int i = 0;
                    for(i=0; i<4; i++) {
                        for (j=0; j<9; j++) {
                            if (nibbles[i].charAt(j) == '1' || nibbles[i].charAt(j) == ' ') {
                                if (nibbles[i].charAt(j) == '1')
                                subnetSlash++;
                                continue;
                            } else break;
                        }
                        sub = nibbles[i].substring(0,j);
                        colorIt = "<html><font color=blue>"+sub+"</font>";
                        showIt = colorIt + nibbles[i].substring(j);

                        if(i == 0) {
                            lblSBin1.setText(showIt);
                            System.out.println("lblPBin1:" + lblPBin1.getText());
                            System.out.println("lblSBin1:" + lblSBin1.getText());
                            continue;
                        }
                        if (i == 1) {
                            lblSBin2.setText(showIt);
                            System.out.println("lblPBin2:" + lblPBin2.getText());
                            System.out.println("lblSBin2:" + lblSBin2.getText());
                            continue;
                        }
                        if (i == 2) {
                            lblSBin3.setText(showIt);
                            System.out.println("lblPBin3:" + lblPBin3.getText());
                            System.out.println("lblSBin3:" + lblSBin3.getText());
                            continue;
                        }
                        if (i == 3) {
                            lblSBin4.setText(showIt);
                            System.out.println("lblPBin4:" + lblPBin4.getText());
                            System.out.println("lblSBin4:" + lblSBin4.getText());
                            continue;
                        }
                    }
                    lblSlashSubnet.setText("/"+ subnetSlash);
                }
            }
            if (!isValid) {
                lblErrorMsg.setVisible(true);
                return;
            }

return;
    }
*/
    private boolean validateInputRange() {
        boolean valid = true;
        for (int i=0; i<4; i++) {
            if (num[i] > 255 || num[i] < 0) {
                if (type.equals("initial")) {
                    txtIpAddr[i].setBackground(Color.red);
                    valid = false;
                }  else if (type.equals("network")) {
                    txtNwMask[i].setBackground(Color.red);
                    valid = false;
                }  else if (type.equals("subnet")) {
                    txtSnMask[i].setBackground(Color.red);
                    valid = false;
                }
            }
        }
        if (!valid) {
            lblErrorMsg.setText("IP address numbers must be in the range of 0 to 255");
            return valid;
        } else if (type.equals("network") || type.equals("subnet")) {
            valid = validateMaskContiguous(num[], type);
            if (valid && type.equals("subnet")) {
                valid = validateSubnet(num[]);
                if (!valid) {
                    lblErrorMsg.setText("Subnet mask must be greater than or equal to Network mask");
                    return valid;
                }
            } else {
                lblErrorMsg.setText("Netmask bits must be contiguous binary 1's. Next valid mask number is " + next);
                return valid;
                }
            }
        for (int i=0; i<4; i++) {
            txtIpAddr[i].setBackground(Color.WHITE);
            txtNwMask[i].setBackground(Color.WHITE);
            txtSnMask[i].setBackground(Color.WHITE);
        }
        return valid;
    }

    private boolean validateMaskContiguous(int[] num, String type) {
        boolean valid = true;
        for (int i=0; i<4; i++) {
        switch (num[i]) {
            case 0: break;
            case 128: break;
            case 192: break;
            case 224: break;
            case 240: break;
            case 248: break;
            case 252: break;
            case 254: break;
            case 255: break;
            default: valid = false;
                if (num[i] < 128) {
                    next = 128;
                } else if (num[i] < 192) {
                    next = 192;
                } else if (num[i] < 224) {
                    next = 224;
                } else if (num[i] < 240) {
                    next = 240;
                } else if (num[i] < 248) {
                    next = 248;
                } else if (num[i] < 252) {
                    next = 252;
                } else if (num[i] < 254) {
                    next = 254;
                } else if (num[i] < 255) {
                    next = 255;
                }
                break;
            }
        }
        return valid;
    }

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnReset;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblClassName;
    private javax.swing.JLabel lblClassMask[];
    private javax.swing.JLabel lblSlashClass;
    private javax.swing.JLabel lblIPAddrName1;
    private javax.swing.JTextField txtIpAddr[];
    private javax.swing.JLabel lblIpAddrName2;
    private javax.swing.JLabel lblIpBin[];
    private javax.swing.JLabel lblNetworkmaskName1;
    private javax.swing.JTextField txtNwMask[];
    private javax.swing.JLabel lblNetworknaskName2;
    private javax.swing.JLabel lblNwBin[];
    private javax.swing.JLabel lblSlashNetwork;
    private javax.swing.JLabel lblSubnetmaskName1;
    private javax.swing.JTextField txtSnMask[];
    private javax.swing.JLabel lblSubnetmaskName2;
    private javax.swing.JLabel lblSnBin[];
    private javax.swing.JLabel lblSlashSubnet;
    private javax.swing.JLabel lblErrorMsg;
    
    
    
    
   
    
    
    
    
    
    
    
    
    

    // End of variables declaration//GEN-END:variables


}
